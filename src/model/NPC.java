package model;

import java.util.Random;

/**
 * It will act as the algorithm for the AI.
 *
 * @author bonetgi@usi.ch, rimh@usi.ch
 * @version 1.0
 */
public class NPC
{
    private Player player;
    private static final int UPPERBOUND = 3; //So it will generate a number between 0 to 3 using Random function
    public static final String RED = "r";
    public static final String YELLOW = "y";
    public static final String GREEN = "g";
    public static final String BLUE = "b";
    
    /**
     * Constructor for the class NPC.
     * 
     * @param player the player
     */
    public NPC(Player player) {
        this.player = player;
    }
    
    /**
     * Gives the index of leftmost card that can be played.
     * 
     * @param topCard is the Card which is on top of the pile
     * @param inc is the integer representing increment count
     * @return integer representing the index of leftmost card that can be played
     */
    public int playNext(Card topCard, int inc) {
        String color = topCard.getColor();
        String value = topCard.getValue();
        GameLogic logic = new GameLogic(color, value);
        int index = 0;
        for (Card card: this.player.getHand()) {
            if (logic.correctCard(card, inc)) {
                index = this.player.getHand().indexOf(card);
                return index;
            }
        }
        return index;
    }
    
    /**
     * Chooses a number between 0 to upperbound.
     * 
     * @return integer between 0 to upperbound
     */
    public int probability() {
        Random random = new Random();
        return random.nextInt(UPPERBOUND);
    }
    
    /**
     * Random color according the random value generated by probability().
     * 
     * @return String representing a random color
     */
    public String wildColor() {
        int index = probability();
        String color = "";
        switch (index) {
            case 0: color = RED;
            break;
            case 1: color = YELLOW;
            break;
            case 2: color = GREEN;
            break;
            default: color = BLUE;
            break;
        }
        return color;
    }
    
    /**
     * Checks if the randomly generaged number if equal to 0.
     * 
     * @return Boolean stating randomly generated number is 0
     */
    public Boolean probabilityGenerator() {
        if (probability() == 0) {
            return true;
        } else {
            return false;
        }
    }
}
